{"remainingRequest":"/Users/clayton/Sites/Vue/Vue-Mastery/Real World Vue - Author's Source/node_modules/babel-loader/lib/index.js!/Users/clayton/Sites/Vue/Vue-Mastery/Real World Vue - Author's Source/node_modules/eslint-loader/index.js??ref--13-0!/Users/clayton/Sites/Vue/Vue-Mastery/Real World Vue - Author's Source/src/store/modules/event.js","dependencies":[{"path":"/Users/clayton/Sites/Vue/Vue-Mastery/Real World Vue - Author's Source/src/store/modules/event.js","mtime":1593642038564},{"path":"/Users/clayton/Sites/Vue/Vue-Mastery/Real World Vue - Author's Source/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/clayton/Sites/Vue/Vue-Mastery/Real World Vue - Author's Source/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/clayton/Sites/Vue/Vue-Mastery/Real World Vue - Author's Source/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.find\";\nimport EventService from '@/services/EventService.js';\nexport var namespaced = true;\nexport var state = {\n  events: [],\n  eventsTotal: 0,\n  event: {}\n};\nexport var mutations = {\n  ADD_EVENT: function ADD_EVENT(state, event) {\n    state.events.push(event);\n  },\n  SET_EVENTS: function SET_EVENTS(state, events) {\n    state.events = events;\n  },\n  SET_EVENTS_TOTAL: function SET_EVENTS_TOTAL(state, eventsTotal) {\n    state.eventsTotal = eventsTotal;\n  },\n  SET_EVENT: function SET_EVENT(state, event) {\n    state.event = event;\n  }\n};\nexport var actions = {\n  createEvent: function createEvent(_ref, event) {\n    var commit = _ref.commit,\n        dispatch = _ref.dispatch;\n    return EventService.postEvent(event).then(function () {\n      commit('ADD_EVENT', event);\n      var notification = {\n        type: 'success',\n        message: 'Your event has been created'\n      };\n      dispatch('notification/add', notification, {\n        root: true\n      });\n    }).catch(function (error) {\n      var notification = {\n        type: 'error',\n        message: 'There was a problem creating your event: ' + error.message\n      };\n      dispatch('notification/add', notification, {\n        root: true\n      });\n      throw error;\n    });\n  },\n  fetchEvents: function fetchEvents(_ref2, _ref3) {\n    var commit = _ref2.commit,\n        dispatch = _ref2.dispatch;\n    var perPage = _ref3.perPage,\n        page = _ref3.page;\n    EventService.getEvents(perPage, page).then(function (response) {\n      commit('SET_EVENTS_TOTAL', parseInt(response.headers['x-total-count']));\n      commit('SET_EVENTS', response.data);\n    }).catch(function (error) {\n      var notification = {\n        type: 'error',\n        message: 'There was a problem fetching events: ' + error.message\n      };\n      dispatch('notification/add', notification, {\n        root: true\n      });\n    });\n  },\n  fetchEvent: function fetchEvent(_ref4, id) {\n    var commit = _ref4.commit,\n        getters = _ref4.getters,\n        dispatch = _ref4.dispatch;\n    var event = getters.getEventById(id);\n\n    if (event) {\n      commit('SET_EVENT', event);\n    } else {\n      EventService.getEvent(id).then(function (response) {\n        commit('SET_EVENT', response.data);\n      }).catch(function (error) {\n        var notification = {\n          type: 'error',\n          message: 'There was a problem fetching event: ' + error.message\n        };\n        dispatch('notification/add', notification, {\n          root: true\n        });\n      });\n    }\n  }\n};\nexport var getters = {\n  getEventById: function getEventById(state) {\n    return function (id) {\n      return state.events.find(function (event) {\n        return event.id === id;\n      });\n    };\n  }\n};",{"version":3,"sources":["/Users/clayton/Sites/Vue/Vue-Mastery/Real World Vue - Author's Source/src/store/modules/event.js"],"names":["EventService","namespaced","state","events","eventsTotal","event","mutations","ADD_EVENT","push","SET_EVENTS","SET_EVENTS_TOTAL","SET_EVENT","actions","createEvent","commit","dispatch","postEvent","then","notification","type","message","root","catch","error","fetchEvents","perPage","page","getEvents","parseInt","response","headers","data","fetchEvent","id","getters","getEventById","getEvent","find"],"mappings":"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","sourcesContent":["import EventService from '@/services/EventService.js'\n\nexport const namespaced = true\n\nexport const state = {\n  events: [],\n  eventsTotal: 0,\n  event: {}\n}\n\nexport const mutations = {\n  ADD_EVENT(state, event) {\n    state.events.push(event)\n  },\n  SET_EVENTS(state, events) {\n    state.events = events\n  },\n  SET_EVENTS_TOTAL(state, eventsTotal) {\n    state.eventsTotal = eventsTotal\n  },\n  SET_EVENT(state, event) {\n    state.event = event\n  }\n}\n\nexport const actions = {\n  createEvent({ commit, dispatch }, event) {\n    return EventService.postEvent(event)\n      .then(() => {\n        commit('ADD_EVENT', event)\n        const notification = {\n          type: 'success',\n          message: 'Your event has been created'\n        }\n        dispatch('notification/add', notification, { root: true })\n      })\n      .catch(error => {\n        const notification = {\n          type: 'error',\n          message: 'There was a problem creating your event: ' + error.message\n        }\n        dispatch('notification/add', notification, { root: true })\n        throw error\n      })\n  },\n  fetchEvents({ commit, dispatch }, { perPage, page }) {\n    EventService.getEvents(perPage, page)\n      .then(response => {\n        commit('SET_EVENTS_TOTAL', parseInt(response.headers['x-total-count']))\n        commit('SET_EVENTS', response.data)\n      })\n      .catch(error => {\n        const notification = {\n          type: 'error',\n          message: 'There was a problem fetching events: ' + error.message\n        }\n        dispatch('notification/add', notification, { root: true })\n      })\n  },\n  fetchEvent({ commit, getters, dispatch }, id) {\n    var event = getters.getEventById(id)\n\n    if (event) {\n      commit('SET_EVENT', event)\n    } else {\n      EventService.getEvent(id)\n        .then(response => {\n          commit('SET_EVENT', response.data)\n        })\n        .catch(error => {\n          const notification = {\n            type: 'error',\n            message: 'There was a problem fetching event: ' + error.message\n          }\n          dispatch('notification/add', notification, { root: true })\n        })\n    }\n  }\n}\n\nexport const getters = {\n  getEventById: state => id => {\n    return state.events.find(event => event.id === id)\n  }\n}\n"]}]}